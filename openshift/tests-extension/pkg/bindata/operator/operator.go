// Code generated for package operator by go-bindata DO NOT EDIT. (@generated)
// sources:
// testdata/operator/Dockerfile
// testdata/operator/manifests/registry.clusterserviceversion.yaml
// testdata/operator/metadata/annotations.yaml
// testdata/operator/metadata/properties.yaml
// testdata/operator/tests/scorecard/config.yaml
package operator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6e\xa3\x40\x0c\x86\xef\x79\x0a\x4b\x7b\x5c\x65\x10\xda\x5c\x39\xec\x46\xdb\x53\xaa\x54\xbd\xf5\x54\x99\xc1\x90\x29\x13\x3c\xf2\x18\x2a\xde\xbe\x82\x00\x6d\xda\x0b\xdc\x06\xc6\xfe\xf8\xb1\xbf\x87\xe7\xf3\x23\x44\x2b\xa8\xf6\xb2\xdb\xfd\x82\x23\x0b\x41\xde\x36\x85\x27\xf0\x98\x93\x8f\x66\x77\xfa\xfb\xef\xff\x09\x38\x90\xa0\xb2\x44\x33\x9f\x4a\xc1\x2b\xbd\xb3\xd4\xc6\xb1\xb9\xf5\x98\x2b\x15\x0e\xb5\x0f\x64\xba\x34\x13\xaa\x5c\x54\xe9\x7f\x77\xe9\x36\x08\x36\xae\xa4\xa8\x71\x80\x2c\x0f\xc9\xc6\x20\x8a\x05\x2a\x8e\x88\xe9\xbc\x8d\x10\xd0\xd6\x58\xdd\xfd\xc8\xa6\x7e\x7b\xc1\xa6\x19\x06\xd8\xa5\x19\xfa\x70\xc1\x75\xdd\x57\x52\x71\x36\x9a\xbc\x75\xbe\x20\xc9\xe6\xa2\x7d\x2c\xea\x7d\x97\x9a\x3f\x07\xb3\x72\x9a\x33\xe9\x6e\x27\xd3\xcb\xd5\x2b\x99\x21\x41\xf8\x8d\xac\xbe\x7a\xec\xb9\xd5\xac\x62\x53\xb7\x39\x4d\x21\x8d\xe3\xa4\x3b\x0c\xfe\x9c\x46\x67\xa0\x64\x01\xa5\xa8\xae\xa9\x56\xfa\x33\x54\xdf\x27\x8d\x96\x85\x2c\x4a\xb1\x3a\xeb\xc8\xb0\xdc\x94\xae\x1a\x00\x3a\x5a\xb3\x60\x92\x9b\xdf\xa1\x87\xd2\x79\x8a\xa0\x0c\x9e\x2d\xaa\xe3\x26\x42\x0c\x64\x5d\xe9\xa8\x80\xbc\x5f\xc4\x3f\x9e\x9f\x5e\x60\xf1\x0f\x92\x2f\x2a\xde\xae\x26\xaf\x20\xf9\x34\x6c\xbc\xf8\xf6\x65\x48\x7e\x44\xf9\x08\x00\x00\xff\xff\xa9\xb8\xee\xcf\x78\x03\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 888, mode: os.FileMode(420), modTime: time.Unix(1755024325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsRegistryClusterserviceversionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4b\x6f\xe3\xb6\x13\xbf\xfb\x53\x0c\x74\xfe\xd3\xb1\xb2\xd9\xfd\x07\x3c\x35\xfb\xc0\xa2\x40\x92\x0d\x36\x69\x0f\x2d\x8a\x62\x4c\x4e\x6c\xd6\x14\xc9\x92\x94\x13\xed\x76\xbf\x7b\x41\x3d\x6c\xc9\x52\x12\x2f\xda\x4b\x79\x91\x34\xf3\x9b\x27\x87\x9c\x11\x3a\xf5\x33\xf9\xa0\xac\xe1\x60\x1d\x79\x8c\xd6\x87\xb9\xb0\x9e\x6c\x7a\x14\x27\xdb\x1c\xb5\x5b\x63\x3e\xdb\x28\x23\x39\xbc\xd3\x65\x88\xe4\x6f\xc9\x6f\x95\xa0\x56\x74\x56\x50\x44\x89\x11\xf9\x0c\x00\x8d\xb1\x11\xa3\xb2\x26\xa4\x4f\x00\xd4\x05\xa3\x47\x2c\x9c\xa6\xc0\xe1\x2f\x56\x13\x01\x7e\x6d\x9f\x00\x5f\x77\x6f\x00\xd9\xde\xa1\x8c\x43\x66\x05\xb3\x4e\xd2\x96\xd1\x29\xcd\x3b\xff\xee\x3d\x16\xf4\x60\xfd\x66\xae\xec\xfc\x45\xc4\x2e\x82\xec\x7f\x7d\x3b\x29\x9c\x64\xe1\x33\xad\x54\x88\xbe\x1a\x72\xbb\x80\x32\x3e\xf0\x0e\x20\xd3\xb8\x24\x1d\x46\xf4\xda\x73\x37\xdf\x94\x4b\xf2\x86\x22\x85\x64\xb9\x40\x83\x2b\x92\x6c\x59\x25\x4b\x9b\x32\x44\x5b\xa8\x2f\x34\x30\xf5\x84\xa8\xc1\x82\x92\xd0\xdd\x87\xdb\x3b\xf6\xf6\xa7\xeb\xf7\x97\x1f\xb2\x81\xd4\xb7\xa1\x92\x6c\x42\x80\x85\x3a\xe9\x7d\xb9\x81\x54\x16\x1c\x89\x8c\x83\x29\xb5\xde\x91\xbf\xb5\x6f\xbf\xd5\x4f\x81\x0e\x97\x4a\xab\xa8\xd2\xde\xbd\xc5\xa0\x04\xfc\x68\x42\xc4\x56\x42\x78\xc2\x48\xf2\x22\x72\xc8\x4e\x17\xa7\xaf\xd9\xe2\x9c\x2d\xde\xdc\xe5\xff\xe7\x67\xaf\xf8\x59\xfe\x4b\x63\x7b\x5f\x58\x93\x1b\xb4\x2c\x95\x96\xe4\xf7\x05\xc8\x82\xdc\xb0\x6d\x3e\x7f\x75\x36\xcf\x8f\x51\xe0\xbc\xfd\x83\x44\xfc\x5d\x63\x65\xcb\xc8\x61\x65\xeb\x6c\xb6\x7a\xeb\x1a\x38\x9b\x01\xa4\x14\x71\xe8\x25\x68\xbe\x5d\xcc\x17\xb5\x89\xc4\x0a\x0e\x05\x71\x70\x1a\x05\xad\x6d\x92\x9c\xa5\x04\xd5\x35\xed\x54\x68\x2a\x5e\xd2\xbd\x32\xaa\xa9\x6e\xf8\x9a\x92\x25\xea\x6d\xf5\x14\x6c\xe9\xfb\xfc\x96\x2d\x29\x08\xaf\x5c\x43\xe9\xd9\xee\x33\xe6\x70\xf7\xe9\xfd\xa7\x79\x42\xab\xe0\x34\x56\xd7\x87\x9e\xce\x00\x94\xb0\x26\xf9\xc2\x60\x89\x81\xde\x9c\xd5\xe7\x0d\xb2\x26\xc3\x05\x49\x85\xb1\x72\xd4\x52\x54\xb3\x47\xcd\x01\xec\xa2\x48\x4b\x92\xd3\xb6\x2a\xc8\xc4\xd0\x91\x18\xd4\x35\xcd\x7b\x95\xf1\x5c\x29\x73\xd8\x15\xf2\xb3\x12\xa3\x6c\xf7\xd0\xc2\x9a\xe8\xad\x66\x4e\xa3\x21\xde\x7d\x6a\xf2\xac\xb1\xe3\x77\xd8\x91\x16\xf6\x0c\xb8\x1f\x68\x5a\x9e\x9c\x56\x02\x03\x87\xbc\x47\x0d\xa4\x49\x44\xeb\xf9\xe0\x00\x15\x18\xc5\xfa\xb2\x3e\xdc\xfc\xe0\x78\x1e\xef\x2d\x40\x88\x1e\x23\xad\xaa\x76\xf7\xbb\x15\xa9\x70\x1a\x23\x1d\xd8\xec\x5d\x9b\xfd\x35\xba\x42\xfb\x2b\x65\x59\x44\x7d\x90\x6d\x49\xf7\x58\xea\x58\x67\x07\x95\x49\xa7\x69\xec\x5c\x5a\x7a\x32\xc4\xef\x0b\x72\x9c\xe9\x4e\x43\x6d\x7a\xa4\x9d\x01\xfa\xd5\xa4\xcd\xa2\x40\x23\xc7\x0c\x06\x41\x13\xb9\x09\x7a\x96\x2f\x16\x8b\x6c\xc4\x50\x05\xae\x88\xc3\xb2\x0c\xd5\xd2\x3e\x8e\xd8\x5a\x6d\xc9\x50\x08\x37\xde\x2e\x69\x6c\x0e\x60\x1d\xa3\xfb\x48\x71\x8a\x05\xe0\x30\xae\x39\x9c\xac\x09\x75\x5c\x7f\x99\x86\x58\x1f\x39\x9c\x2f\xce\xf3\x09\x76\x7d\x21\xa0\x7e\x4f\x1a\xab\x5b\x12\xd6\xc8\x54\x91\xaf\x27\x90\x8e\xbc\xb2\x72\x87\x39\x5d\x8c\x30\xcd\x79\x98\xde\xda\x54\xf0\x28\xd5\x3f\x0e\x34\x69\xa9\xfe\xad\x38\x8f\x08\x33\x1f\x87\xd9\x5d\xa7\x13\x45\x93\x76\xb3\x50\x71\x92\x03\x20\x5c\xc9\xe1\xf5\x62\x51\x4c\x72\x0b\x2a\xac\xaf\x38\xe4\xa7\xe7\x57\x6a\x02\xe1\xe9\xcf\x92\xc2\xb3\xba\xf3\x17\x54\xbf\x39\x9b\xd0\x1c\x48\x94\x5e\xc5\xea\x9d\x35\x91\x1e\x27\xb3\x8f\x5a\xdb\x87\x1b\xaf\xb6\x4a\xd3\x8a\x3e\x04\x81\x1a\x9b\xa6\x71\x8f\x3a\xd0\x84\xc4\xa0\x37\x4f\xfa\x24\xbd\x75\xd3\x1c\x06\x17\x97\x97\xb3\xef\x74\xd2\x97\xe6\x22\x5c\x5b\xf3\xd9\xda\xc8\x21\xfa\xf2\xd0\xab\xb6\x47\x5e\x08\x61\x4b\x13\x9b\x26\xd6\x5e\x4c\x07\xc8\x48\xbe\x50\xa6\x0e\xf0\xa3\x47\x41\x37\x4f\x54\x84\x4b\xb8\x10\xfa\x37\x21\x03\x5f\xea\x7e\xc4\x2c\xb5\xe7\x8f\xde\x96\x6e\x90\x06\xd6\xf5\xc6\xd6\xf9\xa9\x8a\x62\xe9\xd2\xba\x57\xab\x02\x5d\xe8\x91\xb7\xe4\x97\x07\xb8\x15\xc5\xc1\xb7\x56\x61\x48\x78\x48\xfd\x63\xa8\xba\x9e\x8d\x06\xa4\xd2\xc9\x43\x92\x1b\xc9\x49\xd2\xd4\x03\x3d\x19\x9e\xb0\xd6\xcb\x36\x89\xf3\xcd\x79\x6a\x03\x2f\xc7\xab\x09\x03\xfd\xf7\x62\x3d\x66\x2b\x69\x9b\xa6\x9a\xe7\x43\x9b\xf0\x73\xe8\xd4\x54\x09\x1f\x31\x7d\xec\xdb\xfe\x7e\xc0\xda\x8f\x61\x57\x56\x36\xce\x32\x08\xa5\x4b\x77\x28\xc9\xfe\xb9\x6e\x06\xb7\x4f\x0f\xe6\xba\x1b\x43\x5f\xc2\xde\x2a\xb3\xd2\x74\x34\xfc\xaa\xd4\x51\x3d\x89\xde\x9d\xe4\x06\x7c\xa1\xf5\x0e\x9a\xd2\xb9\xa1\xea\xc1\x7a\xd9\x06\x30\x1c\xe8\xb4\x32\x9b\x96\x31\x3d\xef\x95\x5e\xf3\xba\xe9\x04\x7e\x72\xd2\x1f\xbd\xa5\x2d\x50\x99\x59\x1a\xbc\x54\x7f\x6e\x60\x40\x05\x2a\xcd\xa1\xb2\xa5\xff\xa1\x7e\x4f\xff\xa1\xb5\xb2\xc6\xc4\xd5\x4e\x00\x92\x9f\xb5\x8a\x58\xdf\x5c\x1c\xea\x3f\xbd\x19\x80\xf3\x76\xab\xd2\x3f\x45\x4f\xee\xa6\xa5\x75\x52\x07\xce\x25\x7b\x7b\xaf\xb6\xdd\x4f\x71\xf3\x87\xf0\x77\x00\x00\x00\xff\xff\xb7\xc0\xfc\x99\x27\x0f\x00\x00")

func manifestsRegistryClusterserviceversionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsRegistryClusterserviceversionYaml,
		"manifests/registry.clusterserviceversion.yaml",
	)
}

func manifestsRegistryClusterserviceversionYaml() (*asset, error) {
	bytes, err := manifestsRegistryClusterserviceversionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/registry.clusterserviceversion.yaml", size: 3879, mode: os.FileMode(420), modTime: time.Unix(1755024325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataAnnotationsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xbd\x6e\xac\x40\x0c\x85\x7b\x9e\xc2\xd2\x2d\xaf\xd6\x2b\x94\xad\xe8\xa2\x3c\x48\x64\x66\x0c\x3b\x01\xc6\xc8\x63\x88\x78\xfb\x28\xfc\x25\x9b\x26\x93\x0e\x83\xcf\xa7\x4f\xf8\x50\x8c\x62\x64\x41\x62\xaa\x0a\x80\x7f\xf0\x22\xca\x50\x4f\xd1\xf7\x0c\xdf\x3e\x62\x01\x20\x23\x2b\x99\x68\xc2\xe3\xa9\x51\x1a\xf8\x5d\xb4\xc3\x20\xb8\x85\x70\x60\x1f\xc8\x96\x91\x71\x2e\x2b\x50\x6e\x43\x32\x5d\xfe\xcf\x65\x3e\x81\x62\x68\x38\x59\x5a\x09\xe7\x74\xfd\x83\x82\x91\x27\xa3\x2d\xbf\x0f\xf9\xf1\x91\x5c\x47\xed\xa3\x7f\x76\xd8\xdd\x29\x46\xee\x37\x77\xea\xc7\x3b\xfd\x1e\x1d\xd8\x34\xb8\x84\xf5\x14\x7a\xcf\x5a\x9d\xfb\x97\xe4\xbb\xcb\x5c\xe2\xd3\x0d\x33\x7e\xdf\x81\x79\xbc\xc0\xfe\x36\xeb\x00\x07\x61\x54\x79\x63\x67\xaf\x3d\x2d\x32\x59\x05\xad\x60\x37\xd5\xbc\xfb\x61\x90\xeb\x7c\x2b\xd6\xba\x3c\x7f\x55\x04\x1a\x51\x30\x4e\x16\x62\x9b\x51\x97\xcf\xcd\x1f\xaa\xc9\x89\xb2\x23\xf5\x59\xb2\x2b\xc0\x49\x6c\x42\xbb\xa6\x6d\x2d\xc9\xc9\xb8\x16\x1f\x01\x00\x00\xff\xff\xdc\xc6\x0a\xf0\xdc\x02\x00\x00")

func metadataAnnotationsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metadataAnnotationsYaml,
		"metadata/annotations.yaml",
	)
}

func metadataAnnotationsYaml() (*asset, error) {
	bytes, err := metadataAnnotationsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/annotations.yaml", size: 732, mode: os.FileMode(420), modTime: time.Unix(1755024325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataPropertiesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xb6\xe2\x52\x50\xd0\x55\x28\xa9\x2c\x48\xb5\x52\xc8\xcf\xc9\xd5\xcb\x4d\xac\xf0\x2f\x48\xcd\x0b\xce\xc8\x4c\x2b\x09\x4b\x2d\x2a\xce\xcc\xcf\xe3\x52\x50\x50\x50\x28\x4b\xcc\x29\x4d\xb5\x52\x50\x0a\x73\x0d\x0a\xf6\xf4\xf7\x53\xe2\x02\x04\x00\x00\xff\xff\xf3\xb7\x04\x1f\x43\x00\x00\x00")

func metadataPropertiesYamlBytes() ([]byte, error) {
	return bindataRead(
		_metadataPropertiesYaml,
		"metadata/properties.yaml",
	)
}

func metadataPropertiesYaml() (*asset, error) {
	bytes, err := metadataPropertiesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/properties.yaml", size: 67, mode: os.FileMode(420), modTime: time.Unix(1755024325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsScorecardConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\x17\x50\x82\xa2\x9b\xd6\x5e\xa0\x53\x77\x46\x66\x62\xc1\xb2\xa8\x92\x54\x82\xa0\xe8\xdd\x0b\x3b\x7f\x4d\x93\xa5\x05\xea\x6c\x36\xfd\xa8\xef\x7d\x06\x84\x25\xbe\x91\x68\xe4\xec\x41\x03\x0b\x05\x94\x76\xc1\x85\x04\x8d\x65\x2d\x38\xd0\x8e\xa5\x5f\x44\x5e\x6e\x9f\x30\x95\x0e\x9f\x9b\x3e\xe6\xd6\xc3\x0b\xe7\x75\xdc\x54\x41\x8b\x9c\x9b\x81\x0c\x5b\x34\xf4\x0d\x40\xc6\x81\x3c\x84\xe9\x7b\xa3\x86\x1b\x52\xdf\x38\x28\x28\x98\x12\x25\x0f\x26\x95\x1a\x00\x23\x35\x1d\x17\x1c\x50\x36\xd9\x17\x8e\xd9\xc6\xf7\x71\x72\x2e\xe3\xc6\xd8\x71\xb8\x42\x8d\xc1\x85\x8e\x42\xef\xb4\x50\x98\xc6\x71\xc0\x0d\x79\x78\xaf\xb8\x1f\x6b\x9e\xba\xbb\x73\xf9\xe5\xf5\x59\xbe\xe6\x3e\xf3\x2e\x4f\xcb\x09\x57\x94\xf4\x00\x05\xd0\x1a\x8d\xfc\x01\x73\x1c\x4d\x1b\x37\xe0\x4b\x29\x35\x96\x91\x7f\x3a\xa1\x50\x38\x3d\x03\x0c\x5c\xb3\xbd\xa2\x75\x1e\x3e\x3e\x7f\x23\xca\x69\x70\xab\x9a\xdb\x44\x6e\x8b\x29\xb6\x87\x9f\xfc\x3f\xb6\x9c\x86\x2b\xd7\xbb\xec\x39\x84\x83\xb4\xea\x3a\xdc\x3e\xc8\xf9\x1e\x7e\x5e\x6d\x21\xe5\x2a\x81\xf4\x21\xd6\x67\xfa\x1c\xd2\xd3\x25\x6a\x49\x83\xc4\x62\x2c\x73\x1a\xff\x44\xcf\xa2\x6b\x68\x55\x1f\x25\x7c\x03\xff\x93\xf2\xb7\xe8\x25\x76\x1d\xf9\x0a\x00\x00\xff\xff\xb8\xc2\xd4\xda\x4e\x06\x00\x00")

func testsScorecardConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_testsScorecardConfigYaml,
		"tests/scorecard/config.yaml",
	)
}

func testsScorecardConfigYaml() (*asset, error) {
	bytes, err := testsScorecardConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/scorecard/config.yaml", size: 1614, mode: os.FileMode(420), modTime: time.Unix(1755024325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"manifests/registry.clusterserviceversion.yaml": manifestsRegistryClusterserviceversionYaml,
	"metadata/annotations.yaml":                     metadataAnnotationsYaml,
	"metadata/properties.yaml":                      metadataPropertiesYaml,
	"tests/scorecard/config.yaml":                   testsScorecardConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"manifests": &bintree{nil, map[string]*bintree{
		"registry.clusterserviceversion.yaml": &bintree{manifestsRegistryClusterserviceversionYaml, map[string]*bintree{}},
	}},
	"metadata": &bintree{nil, map[string]*bintree{
		"annotations.yaml": &bintree{metadataAnnotationsYaml, map[string]*bintree{}},
		"properties.yaml":  &bintree{metadataPropertiesYaml, map[string]*bintree{}},
	}},
	"tests": &bintree{nil, map[string]*bintree{
		"scorecard": &bintree{nil, map[string]*bintree{
			"config.yaml": &bintree{testsScorecardConfigYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
