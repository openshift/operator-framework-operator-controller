// Code generated for package operator by go-bindata DO NOT EDIT. (@generated)
// sources:
// testdata/operator/Dockerfile
// testdata/operator/manifests/registry.clusterserviceversion.yaml
// testdata/operator/metadata/annotations.yaml
// testdata/operator/metadata/properties.yaml
// testdata/operator/tests/scorecard/config.yaml
package operator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6e\xa3\x40\x0c\x86\xef\x79\x0a\x4b\x7b\x5c\x65\x10\xda\x5c\x39\xec\x46\xdb\x53\xaa\x54\xbd\xf5\x54\x99\xc1\x90\x29\x13\x3c\xf2\x18\x2a\xde\xbe\x82\x00\x6d\xda\x0b\xdc\x06\xc6\xfe\xf8\xb1\xbf\x87\xe7\xf3\x23\x44\x2b\xa8\xf6\xb2\xdb\xfd\x82\x23\x0b\x41\xde\x36\x85\x27\xf0\x98\x93\x8f\x66\x77\xfa\xfb\xef\xff\x09\x38\x90\xa0\xb2\x44\x33\x9f\x4a\xc1\x2b\xbd\xb3\xd4\xc6\xb1\xb9\xf5\x98\x2b\x15\x0e\xb5\x0f\x64\xba\x34\x13\xaa\x5c\x54\xe9\x7f\x77\xe9\x36\x08\x36\xae\xa4\xa8\x71\x80\x2c\x0f\xc9\xc6\x20\x8a\x05\x2a\x8e\x88\xe9\xbc\x8d\x10\xd0\xd6\x58\xdd\xfd\xc8\xa6\x7e\x7b\xc1\xa6\x19\x06\xd8\xa5\x19\xfa\x70\xc1\x75\xdd\x57\x52\x71\x36\x9a\xbc\x75\xbe\x20\xc9\xe6\xa2\x7d\x2c\xea\x7d\x97\x9a\x3f\x07\xb3\x72\x9a\x33\xe9\x6e\x27\xd3\xcb\xd5\x2b\x99\x21\x41\xf8\x8d\xac\xbe\x7a\xec\xb9\xd5\xac\x62\x53\xb7\x39\x4d\x21\x8d\xe3\xa4\x3b\x0c\xfe\x9c\x46\x67\xa0\x64\x01\xa5\xa8\xae\xa9\x56\xfa\x33\x54\xdf\x27\x8d\x96\x85\x2c\x4a\xb1\x3a\xeb\xc8\xb0\xdc\x94\xae\x1a\x00\x3a\x5a\xb3\x60\x92\x9b\xdf\xa1\x87\xd2\x79\x8a\xa0\x0c\x9e\x2d\xaa\xe3\x26\x42\x0c\x64\x5d\xe9\xa8\x80\xbc\x5f\xc4\x3f\x9e\x9f\x5e\x60\xf1\x0f\x92\x2f\x2a\xde\xae\x26\xaf\x20\xf9\x34\x6c\xbc\xf8\xf6\x65\x48\x7e\x44\xf9\x08\x00\x00\xff\xff\xa9\xb8\xee\xcf\x78\x03\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 888, mode: os.FileMode(420), modTime: time.Unix(1756998653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsRegistryClusterserviceversionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\x0c\x74\x7e\xe9\xd8\xd9\xec\xbe\x01\x4f\xcd\xee\x06\x8b\x02\xf9\x42\x92\xf6\xd0\xa2\x28\xc6\xd4\xc4\x66\x4d\x91\x2c\x49\x39\xab\x4d\xf3\xdf\x0b\x52\x92\x2d\x59\x72\x92\x45\x7b\x29\x2f\x92\xe6\xf3\x99\xe1\x70\x38\x42\x2b\x7f\x26\xe7\xa5\xd1\x1c\x8c\x25\x87\xc1\x38\x3f\x15\xc6\x91\x89\x8f\xe2\x68\x33\x47\x65\x57\x38\x9f\xac\xa5\xce\x39\x7c\x52\xa5\x0f\xe4\xee\xc8\x6d\xa4\xa0\x46\x75\x52\x50\xc0\x1c\x03\xf2\x09\x00\x6a\x6d\x02\x06\x69\xb4\x8f\x9f\x00\xa8\x0a\x46\x5f\xb1\xb0\x8a\x3c\x87\xbf\x58\x22\x02\xfc\xda\x3c\x01\x9e\xb6\x6f\x00\xd9\x0e\x50\xc6\x21\x33\x82\x19\x9b\xd3\x86\xd1\x31\x4d\x5b\x7c\x0f\x0e\x0b\x7a\x34\x6e\x3d\x95\x66\xfa\xaa\xc4\x36\x82\xec\x7f\x5d\x3f\x31\x9c\xe8\xe1\x96\x96\xd2\x07\x57\xf5\xb9\x6d\x40\x19\xef\xa1\x03\xc8\x14\x2e\x48\xf9\x01\x3d\x21\xb7\xd3\x75\xb9\x20\xa7\x29\x90\x8f\x9e\x0b\xd4\xb8\xa4\x9c\x2d\xaa\xe8\x69\x5d\xfa\x60\x0a\xf9\x8d\x7a\xae\x0e\xa8\x6a\x2c\x28\x2a\x3d\x3d\xc1\xfd\xf9\xdd\x3d\xfb\xf8\xd3\xd5\xe7\x8b\x73\x78\x7e\xce\x7a\xba\xcf\x7d\x53\xd9\x41\x35\xe6\xd3\x06\x74\xb5\x7b\xba\x99\xb7\x24\x32\x0e\xba\x54\x6a\x4b\x7e\x6e\xde\x7e\x4b\x4f\x81\x16\x17\x52\xc9\x20\xe3\x3e\x7e\x44\x2f\x05\xfc\xa8\x7d\xc0\x46\x43\x38\xc2\x40\xf9\x59\xe0\x90\x1d\xcf\x8e\xdf\xb3\xd9\x29\x9b\x7d\xb8\x9f\xff\x9f\x9f\xbc\xe3\x27\xf3\x5f\x6a\xdf\xbb\x22\x1b\xdd\xac\x45\x29\x55\x4e\x6e\x57\x8c\xcc\xe7\x6b\xb6\x99\x4f\xdf\x9d\x4c\xe7\x6f\x31\x60\x9d\xf9\x83\x44\xf8\x5d\x61\x65\xca\xc0\x61\x69\x52\x66\x1b\xbb\xa9\x1e\x4e\x26\x00\x31\x51\x1c\x06\x69\x9a\x6e\x66\xd3\x59\x72\x14\x05\xbc\x45\x41\x1c\xac\x42\x41\x2b\x13\xf5\x27\x31\x4d\xa9\xca\xad\xf4\xf5\x19\xc8\xe9\x41\x6a\x59\xd7\x3b\x3c\xc5\x94\x89\xb4\xd1\x8e\xbc\x29\x5d\x97\xdf\xb0\x73\xf2\xc2\x49\xdb\x50\xf6\x11\x74\xd9\x53\xb8\xbf\xfe\x7c\x3d\x8d\x3a\xd2\x5b\x85\xd5\xd5\x38\xea\x09\x80\x14\x46\x47\x5c\x0c\x16\xe8\xe9\xc3\x49\x3a\x8d\x90\xd5\x39\x2f\x28\x97\x18\x2a\x4b\x0d\x45\xd6\xbb\x56\x1f\xcf\x36\xa2\xb8\x72\xb2\xca\x54\x05\xe9\xe0\x5b\x12\x83\x54\xf1\xbc\x53\x2b\x2f\x15\x3a\x87\x6d\x99\xbf\xa8\x71\x20\xff\x1d\x1d\x61\x74\x70\x46\x31\xab\x50\x13\x6f\x3f\x15\x39\x56\x7b\x73\x5b\xd9\x03\xb6\xd8\x0b\x2a\xdd\xa0\xe3\x72\x64\x95\x14\xe8\x39\xcc\x3b\x54\x4f\x8a\x44\x30\x8e\xf7\x0e\x59\x81\x41\xac\x2e\x52\x1b\xe0\x7b\x07\xf9\xed\x98\x01\x7c\x70\x18\x68\x59\x35\x55\xd1\xae\x40\x85\x55\x18\x68\xcf\x67\xa7\xc1\x76\xd7\xa0\xd9\x76\x57\xcc\xb8\x08\x6a\x2f\xf3\x39\x3d\x60\xa9\x42\xca\x0e\x4a\x1d\xcf\xda\x10\x5c\x5c\x6a\x34\xc4\xef\x0b\x72\x98\xe9\xd6\x42\x72\x3d\xb0\xce\x00\xdd\x72\xd4\x67\x51\xa0\xce\x87\x0c\x06\x5e\x11\xd9\x11\x7a\x36\x9f\xcd\x66\xd9\x80\x21\x0b\x5c\x52\xa7\x43\x7e\xba\xbe\xba\xbf\xbd\xbe\xb8\x38\xbf\x1d\x34\xd7\x94\x04\xb9\x21\x4d\xde\xdf\x38\xb3\xa0\xa1\x7b\x80\x55\x08\xf6\x0b\x85\x31\x16\x80\xc5\xb0\xe2\x70\xb4\x22\x54\x61\xf5\x6d\x5c\xc4\xb8\xc0\xe1\x74\x76\x3a\x1f\x61\xa7\xc6\x81\xea\x33\x29\xac\xee\x48\x18\x9d\xc7\x0a\x7d\x3f\x22\x69\xc9\x49\x93\x6f\x65\x8e\x67\x03\x99\xfa\x94\x8c\x6f\x75\x3c\x00\x98\xcb\x7f\x1c\x68\xb4\x52\xfd\x5b\x71\xbe\x21\xcc\xf9\x30\xcc\xb6\xed\x8e\x14\x51\xdc\xcd\x42\x86\x51\x0e\x80\xb0\x25\x87\xf7\xb3\x59\x31\xca\x2d\xa8\x30\xae\xe2\x30\x3f\x3e\xbd\x94\x23\x12\x8e\xfe\x2c\xc9\xbf\x68\x7b\xfe\x8a\xe9\x0f\x27\x23\x96\x3d\x89\xd2\xc9\x50\x7d\x32\x3a\xd0\xd7\xd1\xec\xa3\x52\xe6\xf1\xc6\xc9\x8d\x54\xb4\xa4\x73\x2f\x50\x61\x7d\xb9\x3c\xa0\xf2\x34\xa2\xd1\xbb\xc9\x47\x31\xe5\xce\xd8\x71\x0e\x83\xb3\x8b\x8b\xc9\x77\x82\x74\xa5\x3e\xf3\x57\x46\xdf\x1a\x13\x38\x04\x57\xee\xa3\x6a\xee\xd2\x33\x21\x4c\xa9\x43\x7d\xcd\x35\x8d\x6a\x4f\x32\x90\x2b\xa4\x4e\x01\x7e\x71\x28\xe8\xe6\x40\x45\xd8\x28\xe7\x7d\xb7\x33\x32\x70\xa5\xea\x46\xcc\xe2\x35\xfe\xc5\x99\xd2\xf6\xd2\xc0\xda\x7b\xb3\x01\x3f\x56\x51\x2c\x36\xb1\x07\xb9\x2c\xd0\xfa\x0e\x79\x43\x6e\xb1\x27\xb7\xa4\xd0\xfb\x56\xd2\xf7\x09\x8f\xf1\x3e\xe9\x9b\x4e\x93\x54\x8f\x54\xda\x7c\x9f\x64\x07\x7a\x39\x29\xea\x08\x1d\x0c\x4f\x18\xe3\xf2\x26\x89\xd3\xf5\x69\xbc\x16\x5e\x8f\x57\x11\x7a\xfa\xef\xc5\xfa\x96\xad\xa4\x4d\x9c\x78\x5e\x0e\x6d\x04\x67\x1f\xd4\x58\x09\xbf\x79\x26\xd9\x0d\x03\xbb\x11\x6c\x37\xa8\x5d\x9a\xbc\x86\xcc\xc0\x97\x36\x76\x52\xca\x3b\xc7\xa8\x9e\xec\xae\x1f\xf5\x55\x3b\xb3\xbe\x22\x7a\x27\xf5\x52\xd1\x41\xe9\x5d\xdb\xa8\xc5\x2f\x4b\x15\xe4\x5b\x6d\x9f\x29\xb5\x15\x8d\x29\x5d\x53\xf5\x68\x5c\xde\xc0\x1f\x1b\xf8\x94\xd4\xeb\x86\xfd\xd2\x54\x58\x3a\xc5\xd3\x25\xe4\xf9\xd1\xd1\x70\x70\xcf\x4d\x81\x52\x4f\xe2\x78\x26\xbb\xd3\x05\x03\x2a\x50\x2a\x0e\x95\x29\xdd\x0f\xe9\x3d\xfe\xd7\x26\x93\xb5\xbb\xcb\xad\x02\x44\xe4\xc9\x44\x48\xfd\x8c\x43\xfa\x73\x9c\x00\x58\x67\x36\x32\xfe\x97\x74\xf4\x6e\x1a\x5a\xab\xb5\x07\x31\xfa\xdb\xa1\xda\xb4\x3f\xd9\xf5\xff\xc5\xdf\x01\x00\x00\xff\xff\x82\x2e\xe1\x7d\x77\x0f\x00\x00")

func manifestsRegistryClusterserviceversionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsRegistryClusterserviceversionYaml,
		"manifests/registry.clusterserviceversion.yaml",
	)
}

func manifestsRegistryClusterserviceversionYaml() (*asset, error) {
	bytes, err := manifestsRegistryClusterserviceversionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/registry.clusterserviceversion.yaml", size: 3959, mode: os.FileMode(420), modTime: time.Unix(1759218321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataAnnotationsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xbd\x6e\xac\x40\x0c\x85\x7b\x9e\xc2\xd2\x2d\xaf\xd6\x2b\x94\xad\xe8\xa2\x3c\x48\x64\x66\x0c\x3b\x01\xc6\xc8\x63\x88\x78\xfb\x28\xfc\x25\x9b\x26\x93\x0e\x83\xcf\xa7\x4f\xf8\x50\x8c\x62\x64\x41\x62\xaa\x0a\x80\x7f\xf0\x22\xca\x50\x4f\xd1\xf7\x0c\xdf\x3e\x62\x01\x20\x23\x2b\x99\x68\xc2\xe3\xa9\x51\x1a\xf8\x5d\xb4\xc3\x20\xb8\x85\x70\x60\x1f\xc8\x96\x91\x71\x2e\x2b\x50\x6e\x43\x32\x5d\xfe\xcf\x65\x3e\x81\x62\x68\x38\x59\x5a\x09\xe7\x74\xfd\x83\x82\x91\x27\xa3\x2d\xbf\x0f\xf9\xf1\x91\x5c\x47\xed\xa3\x7f\x76\xd8\xdd\x29\x46\xee\x37\x77\xea\xc7\x3b\xfd\x1e\x1d\xd8\x34\xb8\x84\xf5\x14\x7a\xcf\x5a\x9d\xfb\x97\xe4\xbb\xcb\x5c\xe2\xd3\x0d\x33\x7e\xdf\x81\x79\xbc\xc0\xfe\x36\xeb\x00\x07\x61\x54\x79\x63\x67\xaf\x3d\x2d\x32\x59\x05\xad\x60\x37\xd5\xbc\xfb\x61\x90\xeb\x7c\x2b\xd6\xba\x3c\x7f\x55\x04\x1a\x51\x30\x4e\x16\x62\x9b\x51\x97\xcf\xcd\x1f\xaa\xc9\x89\xb2\x23\xf5\x59\xb2\x2b\xc0\x49\x6c\x42\xbb\xa6\x6d\x2d\xc9\xc9\xb8\x16\x1f\x01\x00\x00\xff\xff\xdc\xc6\x0a\xf0\xdc\x02\x00\x00")

func metadataAnnotationsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metadataAnnotationsYaml,
		"metadata/annotations.yaml",
	)
}

func metadataAnnotationsYaml() (*asset, error) {
	bytes, err := metadataAnnotationsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/annotations.yaml", size: 732, mode: os.FileMode(420), modTime: time.Unix(1756998653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataPropertiesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xb6\xe2\x52\x50\xd0\x55\x28\xa9\x2c\x48\xb5\x52\xc8\xcf\xc9\xd5\xcb\x4d\xac\xf0\x2f\x48\xcd\x0b\xce\xc8\x4c\x2b\x09\x4b\x2d\x2a\xce\xcc\xcf\xe3\x52\x50\x50\x50\x28\x4b\xcc\x29\x4d\xb5\x52\x50\xaa\xae\x56\x08\x73\x0d\x0a\xf6\xf4\xf7\x53\xa8\xad\x55\xe2\x02\x04\x00\x00\xff\xff\x9d\x3d\x49\x26\x49\x00\x00\x00")

func metadataPropertiesYamlBytes() ([]byte, error) {
	return bindataRead(
		_metadataPropertiesYaml,
		"metadata/properties.yaml",
	)
}

func metadataPropertiesYaml() (*asset, error) {
	bytes, err := metadataPropertiesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/properties.yaml", size: 73, mode: os.FileMode(420), modTime: time.Unix(1759218275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsScorecardConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\x17\x50\x82\xa2\x9b\xd6\x5e\xa0\x53\x77\x46\x66\x62\xc1\xb2\xa8\x92\x54\x82\xa0\xe8\xdd\x0b\x3b\x7f\x4d\x93\xa5\x05\xea\x6c\x36\xfd\xa8\xef\x7d\x06\x84\x25\xbe\x91\x68\xe4\xec\x41\x03\x0b\x05\x94\x76\xc1\x85\x04\x8d\x65\x2d\x38\xd0\x8e\xa5\x5f\x44\x5e\x6e\x9f\x30\x95\x0e\x9f\x9b\x3e\xe6\xd6\xc3\x0b\xe7\x75\xdc\x54\x41\x8b\x9c\x9b\x81\x0c\x5b\x34\xf4\x0d\x40\xc6\x81\x3c\x84\xe9\x7b\xa3\x86\x1b\x52\xdf\x38\x28\x28\x98\x12\x25\x0f\x26\x95\x1a\x00\x23\x35\x1d\x17\x1c\x50\x36\xd9\x17\x8e\xd9\xc6\xf7\x71\x72\x2e\xe3\xc6\xd8\x71\xb8\x42\x8d\xc1\x85\x8e\x42\xef\xb4\x50\x98\xc6\x71\xc0\x0d\x79\x78\xaf\xb8\x1f\x6b\x9e\xba\xbb\x73\xf9\xe5\xf5\x59\xbe\xe6\x3e\xf3\x2e\x4f\xcb\x09\x57\x94\xf4\x00\x05\xd0\x1a\x8d\xfc\x01\x73\x1c\x4d\x1b\x37\xe0\x4b\x29\x35\x96\x91\x7f\x3a\xa1\x50\x38\x3d\x03\x0c\x5c\xb3\xbd\xa2\x75\x1e\x3e\x3e\x7f\x23\xca\x69\x70\xab\x9a\xdb\x44\x6e\x8b\x29\xb6\x87\x9f\xfc\x3f\xb6\x9c\x86\x2b\xd7\xbb\xec\x39\x84\x83\xb4\xea\x3a\xdc\x3e\xc8\xf9\x1e\x7e\x5e\x6d\x21\xe5\x2a\x81\xf4\x21\xd6\x67\xfa\x1c\xd2\xd3\x25\x6a\x49\x83\xc4\x62\x2c\x73\x1a\xff\x44\xcf\xa2\x6b\x68\x55\x1f\x25\x7c\x03\xff\x93\xf2\xb7\xe8\x25\x76\x1d\xf9\x0a\x00\x00\xff\xff\xb8\xc2\xd4\xda\x4e\x06\x00\x00")

func testsScorecardConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_testsScorecardConfigYaml,
		"tests/scorecard/config.yaml",
	)
}

func testsScorecardConfigYaml() (*asset, error) {
	bytes, err := testsScorecardConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/scorecard/config.yaml", size: 1614, mode: os.FileMode(420), modTime: time.Unix(1756998653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"manifests/registry.clusterserviceversion.yaml": manifestsRegistryClusterserviceversionYaml,
	"metadata/annotations.yaml":                     metadataAnnotationsYaml,
	"metadata/properties.yaml":                      metadataPropertiesYaml,
	"tests/scorecard/config.yaml":                   testsScorecardConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"manifests": &bintree{nil, map[string]*bintree{
		"registry.clusterserviceversion.yaml": &bintree{manifestsRegistryClusterserviceversionYaml, map[string]*bintree{}},
	}},
	"metadata": &bintree{nil, map[string]*bintree{
		"annotations.yaml": &bintree{metadataAnnotationsYaml, map[string]*bintree{}},
		"properties.yaml":  &bintree{metadataPropertiesYaml, map[string]*bintree{}},
	}},
	"tests": &bintree{nil, map[string]*bintree{
		"scorecard": &bintree{nil, map[string]*bintree{
			"config.yaml": &bintree{testsScorecardConfigYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
