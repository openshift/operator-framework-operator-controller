// Code generated for package singleownbundle by go-bindata DO NOT EDIT. (@generated)
// sources:
// testdata/singleown/bundle/Dockerfile
// testdata/singleown/bundle/manifests/webhook-operator-controller-manager-metrics-service_v1_service.yaml
// testdata/singleown/bundle/manifests/webhook-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml
// testdata/singleown/bundle/manifests/webhook-operator-webhooktest-admin-role_rbac.authorization.k8s.io_v1_clusterrole.yaml
// testdata/singleown/bundle/manifests/webhook-operator-webhooktest-editor-role_rbac.authorization.k8s.io_v1_clusterrole.yaml
// testdata/singleown/bundle/manifests/webhook-operator-webhooktest-viewer-role_rbac.authorization.k8s.io_v1_clusterrole.yaml
// testdata/singleown/bundle/manifests/webhook-operator.clusterserviceversion.yaml
// testdata/singleown/bundle/manifests/webhook.operators.coreos.io_webhooktests.yaml
// testdata/singleown/bundle/metadata/annotations.yaml
// testdata/singleown/bundle/tests/scorecard/config.yaml
package singleownbundle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6e\xa3\x40\x0c\x86\xef\x79\x0a\x4b\x7b\x5c\x65\x10\xda\x5c\x39\xec\x46\xdb\x53\xaa\x54\xbd\xf5\x54\x99\xc1\x90\x29\x13\x3c\xf2\x18\x2a\xde\xbe\x82\x00\x6d\xda\x0b\xdc\x06\xc6\xfe\xf8\xb1\xbf\x87\xe7\xf3\x23\x44\x2b\xa8\xf6\xb2\xdb\xfd\x82\x23\x0b\x41\xde\x36\x85\x27\xf0\x98\x93\x8f\x66\x77\xfa\xfb\xef\xff\x09\x38\x90\xa0\xb2\x44\x33\x9f\x4a\xc1\x2b\xbd\xb3\xd4\xc6\xb1\xb9\xf5\x98\x2b\x15\x0e\xb5\x0f\x64\xba\x34\x13\xaa\x5c\x54\xe9\x7f\x77\xe9\x36\x08\x36\xae\xa4\xa8\x71\x80\x2c\x0f\xc9\xc6\x20\x8a\x05\x2a\x8e\x88\xe9\xbc\x8d\x10\xd0\xd6\x58\xdd\xfd\xc8\xa6\x7e\x7b\xc1\xa6\x19\x06\xd8\xa5\x19\xfa\x70\xc1\x75\xdd\x57\x52\x71\x36\x9a\xbc\x75\xbe\x20\xc9\xe6\xa2\x7d\x2c\xea\x7d\x97\x9a\x3f\x07\xb3\x72\x9a\x33\xe9\x6e\x27\xd3\xcb\xd5\x2b\x99\x21\x41\xf8\x8d\xac\xbe\x7a\xec\xb9\xd5\xac\x62\x53\xb7\x39\x4d\x21\x8d\xe3\xa4\x3b\x0c\xfe\x9c\x46\x67\xa0\x64\x01\xa5\xa8\xae\xa9\x56\xfa\x33\x54\xdf\x27\x8d\x96\x85\x2c\x4a\xb1\x3a\xeb\xc8\xb0\xdc\x94\xae\x1a\x00\x3a\x5a\xb3\x60\x92\x9b\xdf\xa1\x87\xd2\x79\x8a\xa0\x0c\x9e\x2d\xaa\xe3\x26\x42\x0c\x64\x5d\xe9\xa8\x80\xbc\x5f\xc4\x3f\x9e\x9f\x5e\x60\xf1\x0f\x92\x2f\x2a\xde\xae\x26\xaf\x20\xf9\x34\x6c\xbc\xf8\xf6\x65\x48\x7e\x44\xf9\x08\x00\x00\xff\xff\xa9\xb8\xee\xcf\x78\x03\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 888, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x4a\x03\x31\x10\x86\xef\xfb\x14\xf3\x02\xa9\x88\x3d\x48\x8e\xfa\x02\x05\x8b\xf7\xd9\xec\x4f\x1b\x36\xc9\x84\xc9\x6c\x45\xc5\x77\x97\x4d\x2b\x08\xda\x53\x8f\x7f\xf2\x25\xf3\x7f\xc3\x35\xbe\x42\x5b\x94\xe2\xe9\x74\x3f\xcc\xb1\x4c\x9e\x5e\xa0\xa7\x18\x30\x64\x18\x4f\x6c\xec\x07\xa2\xa0\x60\x8b\x52\xf6\x31\xa3\x19\xe7\xea\xa9\x2c\x29\x0d\x44\x89\x47\xa4\xb6\x32\x44\x5c\xeb\x66\x5e\x46\x68\x81\xa1\x6d\xa2\xdc\x65\x2e\x7c\xc0\xe4\xc6\x77\x4f\xf3\xd2\x4c\x72\xfc\xc0\x15\xb6\x70\x86\xa7\x37\x8c\x47\x91\xd9\x49\x85\xb2\x89\x76\x38\x48\x31\x95\xe4\x6a\xe2\x02\xff\x13\x13\xd4\x9d\x07\xac\xd4\xff\xcf\xdd\x5f\xd6\x65\x98\xc6\xd0\x5c\xbb\x88\xb6\x8a\xb0\x0a\x54\x51\xeb\x26\xee\xf2\xd9\xd1\xac\xb6\x5e\x60\xbd\xf2\xf4\xb8\xdd\x3e\x9c\xa3\x8a\x49\x90\xe4\x69\xff\xbc\xeb\x27\xc6\x7a\x80\xed\x7e\x63\x0d\x09\xc1\x44\xaf\xed\xe6\x26\xdf\x66\x6c\x4b\x2f\x9b\x84\xa7\x27\x4e\x5c\x02\xd4\xd3\xe7\xd7\xf0\x1d\x00\x00\xff\xff\xc9\x7d\x34\x2a\xd5\x01\x00\x00")

func manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYaml,
		"manifests/webhook-operator-controller-manager-metrics-service_v1_service.yaml",
	)
}

func manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator-controller-manager-metrics-service_v1_service.yaml", size: 469, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xb1\x4e\xc4\x30\x10\x05\x7b\x7f\xc5\xfe\x80\x73\xa2\x43\x6e\x69\xa9\x22\xa0\xdf\x38\x4f\xdc\x2a\xb6\x37\xda\x5d\x1f\x12\x5f\x8f\x38\xa5\x1d\xcd\x0c\x9f\xf2\x05\x73\xd1\x51\xc8\x36\xae\x0b\xcf\xb8\xab\xc9\x2f\x87\xe8\x58\x8e\x57\x5f\x44\x6f\x8f\x97\x74\xc8\xd8\x0b\xbd\xb5\xe9\x01\x5b\xb5\x21\x75\x04\xef\x1c\x5c\x12\x51\x35\x3c\x83\x0f\xe9\xf0\xe0\x7e\x16\x1a\xb3\xb5\x44\x34\xb8\xa3\xd0\x0f\xb6\xbb\xea\x91\xf5\x84\x71\xa8\xe5\x8e\x30\xa9\x9e\x0d\xbc\xc3\x92\xcd\x06\x2f\x29\xd3\xd0\xb1\xc2\x75\x5a\xc5\xe7\xfa\xee\xff\xef\x4c\xb7\xcb\x4e\x44\x0f\xd8\x76\xd1\x6f\x44\xfa\x0b\x00\x00\xff\xff\x92\x4d\xeb\x0f\xbf\x00\x00\x00")

func manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYaml,
		"manifests/webhook-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml",
	)
}

func manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\xbd\x4e\x43\x31\x0c\x85\xf7\x3c\x85\xb7\x4a\x48\x49\xc5\x86\xb2\x32\xb0\x23\xc4\xee\xdc\x6b\xb5\x51\x7e\x1c\xd9\x4e\x11\x7d\x7a\x74\xaf\xda\x01\x04\x1b\xab\x7d\xbe\xef\x1c\x1c\xf9\x9d\x44\x33\xf7\x08\x92\x70\x09\x38\xed\xcc\x92\xaf\x68\x99\x7b\x28\x4f\x1a\x32\x1f\x2f\x8f\xae\xe4\xbe\x46\x78\xae\x53\x8d\xe4\x95\x2b\xb9\x46\x86\x2b\x1a\x46\x07\xb0\x08\xed\xc0\x5b\x6e\xa4\x86\x6d\x44\xe8\xb3\x56\x07\x50\x31\x51\xd5\x2d\x03\x80\x63\x84\x32\x13\x49\x27\xa3\x5d\xdc\xb0\xe3\x89\x56\x9f\x3e\x23\x94\xa9\xc6\x2d\x5f\xe9\x8f\x6c\xc7\x46\x11\x3e\x28\x9d\x99\x8b\xe7\x41\x82\xc6\xe2\x00\x7e\x7f\xf8\xdb\xc1\x48\xcd\xe3\xda\x72\xf7\xb2\xcd\x96\x59\x49\xa3\xf3\x80\x23\xbf\x08\xcf\xb1\x8f\xf3\x77\x3e\xdc\x79\x0d\x0b\x0b\xf1\x56\xed\x00\x84\x94\xa7\x2c\xf4\x3d\xbc\xb9\xd5\x01\x5c\x48\xd2\xed\x73\x78\x38\xfc\xa3\xfb\xa8\x86\x36\x7f\x54\x9c\xc8\xdc\x57\x00\x00\x00\xff\xff\x8c\x9c\xc7\xde\xb8\x01\x00\x00")

func manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
		"manifests/webhook-operator-webhooktest-admin-role_rbac.authorization.k8s.io_v1_clusterrole.yaml",
	)
}

func manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator-webhooktest-admin-role_rbac.authorization.k8s.io_v1_clusterrole.yaml", size: 440, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\x5f\xc0\x0e\xfe\xed\x87\xd6\x0e\xdd\x8b\xa2\x3b\x6d\x1f\x12\xc1\xb2\x28\x90\x54\x82\xe6\xe9\x0b\xab\xf1\xd0\xa2\xdd\x3a\xe9\x70\x3c\x9e\x3e\x90\x6b\x7a\x83\x5a\x92\x12\x49\x27\x9e\x47\x6e\x7e\x11\x4d\x77\xf6\x24\x65\x5c\xff\xdb\x98\xe4\x74\xfd\x17\xd6\x54\x96\x48\x4f\xb9\x99\x43\x5f\x24\x23\x6c\x70\x5e\xd8\x39\x06\xa2\x59\xd1\x17\x5e\xd3\x06\x73\xde\x6a\xa4\xd2\x72\x0e\x44\x99\x27\x64\xdb\x33\x44\x5c\xeb\xb8\xb6\x09\x5a\xe0\xe8\xc5\x1b\x17\x3e\x63\x19\xa6\xf7\x48\x6b\x33\x97\x2d\xdd\xf1\x4b\xb6\xf0\x86\x48\x37\x4c\x17\x91\x75\x90\x0a\x65\x17\x0d\x44\x3f\x0f\x86\x87\xe1\x30\x1f\xb0\xa4\xdd\xd2\x9d\x5b\x5b\x86\xc5\x30\x10\xd7\xf4\xac\xd2\x6a\xa7\x1b\x8e\x82\xf1\x28\xb0\x71\x16\x85\xec\x7f\x07\x22\x85\x49\xd3\x19\x5f\xc3\x7b\xb9\x05\xa2\x2b\x74\x7a\x4c\xfa\x29\xd0\xe5\x82\x8c\x87\x3c\xc3\xfb\x9b\x93\x7d\x8a\xca\x3e\x5f\xba\x6a\x75\x39\x16\x6e\xdd\xfc\x3b\xb2\x93\x39\x7b\xfb\x06\xb8\xa3\x7c\x04\x00\x00\xff\xff\xef\x37\x19\xc6\xf7\x01\x00\x00")

func manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
		"manifests/webhook-operator-webhooktest-editor-role_rbac.authorization.k8s.io_v1_clusterrole.yaml",
	)
}

func manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator-webhooktest-editor-role_rbac.authorization.k8s.io_v1_clusterrole.yaml", size: 503, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\x5f\x40\x0e\xfe\xed\x87\xd6\x0e\xdd\x8b\xa2\x3b\xed\x1c\x12\xc1\x92\x28\x90\x54\x82\xe6\xe9\x0b\xbb\xc9\x50\x20\xdd\x3a\x91\xe0\x1d\xbf\x3b\xee\xf9\x03\x6a\x59\x5a\x22\x9d\x79\x99\x78\xf8\x59\x34\xdf\xd8\xb3\xb4\x69\xfd\x6f\x53\x96\xc3\xe5\x5f\x58\x73\x3b\x26\x7a\x29\xc3\x1c\xfa\x26\x05\xa1\xc2\xf9\xc8\xce\x29\x10\x2d\x8a\xfd\xe1\x3d\x57\x98\x73\xed\x89\xda\x28\x25\x10\x15\x9e\x51\x6c\xf3\x10\x71\xef\xd3\x3a\x66\x68\x83\x63\x07\x57\x6e\x7c\xc2\x31\xce\x9f\x89\xd6\x61\x2e\x35\xdf\xf0\x8b\xb7\x71\x45\xa2\x2b\xe6\xb3\xc8\x1a\xa5\x43\xd9\x45\x03\xd1\x73\x21\xde\x0f\x0e\xf3\x78\xc9\xb8\x42\xa3\x6e\xbd\x75\x14\x58\x0a\x91\xb8\xe7\x57\x95\xd1\xf7\x76\xf1\x01\x98\x1e\x00\x9b\x16\x51\xc8\x96\x1d\x88\x14\x26\x43\x17\xfc\x34\x6f\x70\x0b\x44\x17\xe8\x7c\x57\x4e\xf0\x7d\x96\x6c\xdf\xcb\x95\x7d\x39\xff\x61\xdc\xc1\x9c\x7d\x3c\x49\xfd\x0a\x00\x00\xff\xff\x53\xe3\xf7\xd0\xcc\x01\x00\x00")

func manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
		"manifests/webhook-operator-webhooktest-viewer-role_rbac.authorization.k8s.io_v1_clusterrole.yaml",
	)
}

func manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator-webhooktest-viewer-role_rbac.authorization.k8s.io_v1_clusterrole.yaml", size: 460, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorClusterserviceversionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\x71\xf0\xeb\xbf\x9c\x38\xff\xb4\x08\x04\x0c\x98\x9b\xba\x59\xd1\x3c\x21\xc9\xd6\x01\xc3\x50\x9c\xc9\xb3\xcd\x99\x22\x39\x92\x92\xeb\x64\xf9\xee\x03\x25\xf9\x41\xb2\xe4\x38\x49\xb1\x01\xdb\xf8\xc6\x0a\x79\x8f\xbf\x23\x8f\x77\x0c\x1a\xf1\x13\x59\x27\xb4\x8a\x41\x1b\xb2\xe8\xb5\x75\x3d\xa6\x2d\xe9\xf0\x93\x1c\x64\x7d\x94\x66\x8a\xfd\xce\x4c\x28\x1e\xc3\xa9\x4c\x9d\x27\x7b\x4b\x36\x13\x8c\x4a\xd6\x4e\x42\x1e\x39\x7a\x8c\x3b\x00\xa8\x94\xf6\xe8\x85\x56\x2e\xfc\x09\x80\x32\x89\xe8\x2b\x26\x46\x92\x8b\xe1\x8f\x28\x9f\x04\xf8\xa5\xfc\x05\x78\x58\x7d\x01\x74\xd7\x06\x75\x63\xe8\xce\x69\x34\xd5\x7a\xd6\xdb\x32\x4d\xe8\x83\xac\xdf\xfd\xdf\x26\x67\x30\x30\xf0\x7c\x2e\x78\xee\xc8\xf9\x2a\xc1\xd2\xca\x6e\x5c\x51\x09\xd0\x95\x38\x22\xe9\xb6\xe6\x73\x73\x4c\x6f\x96\x8e\xc8\x2a\xf2\x94\xab\x4d\x50\xe1\x84\x78\x34\x5a\x04\x65\xb3\xd4\x79\x9d\x88\x7b\xaa\xa8\x6a\x61\x55\x98\xd0\x86\x57\xd1\xd2\xab\x6e\x85\xf5\xb1\x2a\xa9\x5b\xe3\xf2\xe4\x7c\xe4\x72\x38\x37\xf9\x2a\x5c\x5d\x67\x88\x75\x63\x50\xa9\x94\x9d\x06\x8a\x97\x22\x7e\xf4\x1f\xe2\xcf\x42\xbc\xfc\xfa\x35\xff\x65\x68\x70\x24\xa4\xf0\x22\x9c\x83\x77\xe8\x04\x83\x8f\xca\x79\x2c\x39\xd6\x88\x2f\xbf\xc6\x16\x13\x9a\x6b\x3b\x0b\xae\x8c\x52\x21\x39\xd9\xf5\x31\x8d\x1c\x9f\x45\x59\xbf\x77\xdc\xef\xf5\xf7\x11\x60\xac\xfe\x8d\x98\xff\x22\x71\xa1\x53\x1f\xc3\x44\xe7\x60\x95\x72\xf3\xf8\x1e\x77\x00\x82\xf3\x31\x74\x1f\x1e\xe0\x7a\x70\xfa\x69\x70\x36\x8c\x2e\x07\x17\x43\x78\x7c\xec\x65\x87\xbd\xc3\xde\x9b\x6e\x49\xe3\x0c\x32\x8a\xc1\x48\x64\x34\xd5\x41\x44\x27\x60\x90\xa7\x00\x23\x5c\x91\x20\x38\x8d\x85\x12\x45\x32\x80\x87\x80\x07\xcb\xc3\x67\xc9\xe9\xd4\x56\xd7\x0b\x1f\xe6\x8a\x78\x5c\xe2\x16\x01\x27\xc7\xac\x30\x3e\xcf\x4f\x1b\xdb\x0c\x84\x03\x3f\x25\xb8\x65\x53\x4a\x10\xc6\xda\xe6\x7f\x6e\x04\xcc\xc1\xe0\xfa\xe3\x2a\x12\x5c\x38\x23\x71\x71\x99\xfb\x56\xca\x81\x20\x68\x45\x51\xa4\xb7\x0d\x15\xab\x95\x02\x90\x4d\xd1\xd1\xc3\x03\x9c\xde\xbc\x8f\x6e\x7f\xfc\xf0\xe1\xe3\xcf\x01\x9a\x1d\xa7\x66\x25\x27\x5b\xe6\xd9\xac\xff\x0f\xf7\xef\xa8\x03\x55\xcf\xea\xc7\x0f\x82\x1a\x18\x8b\xaf\x3e\xb5\xd4\xa9\x99\x5f\x27\xee\x00\x08\xa6\x55\xb1\x29\x22\x18\xa1\xa3\xb7\xc7\xf9\x6d\x03\xdd\xe5\x79\x4c\x88\x0b\xf4\x0b\x43\xe5\x9c\x28\xce\x55\xc1\xb3\xdc\x96\xf9\x21\x2c\xee\xaf\x6b\xb2\x89\x70\x6e\xbd\xef\x0a\xd9\x36\x0d\x77\x54\x25\x19\x44\x61\x37\x9f\x59\x9d\x9a\xda\x42\xb1\xb8\x0f\x30\xc5\x58\x6e\xf9\x5d\x62\x72\xf4\x6b\xcb\x19\xd9\x51\x23\x0f\xb3\x84\x9e\x1a\x16\x38\x49\x6a\x5c\x98\x90\x6f\x98\x95\xc2\x35\x4d\x1b\xf4\x6c\xda\x30\x9f\x1a\xde\xac\x76\xbe\xc5\xf0\xd7\x63\x77\x30\x16\x0a\xa5\xb8\x27\xbb\x37\x8c\x0d\xfe\xfc\x0d\x76\x3b\x8f\x3e\xdd\xdb\xe6\xe6\x40\x3e\x23\x62\x4f\x78\x88\xa9\x9f\x92\xf2\x82\xe5\x75\x5c\x6f\x76\xf2\x5c\xdf\xbc\x9e\x91\xb2\x94\x09\x9a\xbf\x66\x3f\xef\x61\xa6\xb6\xe2\xfe\xa5\x56\xba\x74\x14\x6e\x44\x64\x8c\x9c\x7b\xad\xb5\xe5\x8d\x37\x60\x4c\xa7\xca\x37\xa7\xb2\x88\x69\xe5\xad\x96\x92\x6c\x54\x54\x35\xb6\x94\xc0\xc9\x48\xbd\x48\x48\xf9\x4a\x42\xca\xcb\xa4\xaa\xfa\x5d\xf5\x51\x0c\xab\xea\xe8\x09\x1e\xd5\x96\x6a\xd7\xa3\xb4\x35\x32\x12\x15\xc5\xd0\x6a\x3a\xd4\xef\x90\x3d\xdc\x85\x5a\x5a\x5e\x06\xcb\x48\xc1\xd0\xc5\xd0\xaf\xcc\x3b\x92\xc4\xbc\xb6\xf5\x38\x24\x61\xc3\x9f\xe7\x95\xe4\x76\x88\x5e\xe4\xf3\x73\xfd\x06\x70\xde\xa2\xa7\xc9\xa2\x2c\x6f\xd6\xc3\x53\x62\x24\x7a\xda\x32\x7a\xa3\x57\xaa\x59\x5c\xef\x9c\xaa\x23\x38\xc3\xbc\xac\x39\xc5\x69\x8c\xa9\xf4\x39\xd4\x28\x54\x28\x10\x9b\xcc\x0c\x43\xb6\x20\xf5\x0a\xac\x9e\x8b\x56\x53\xd4\x97\x52\x72\xeb\x1b\xcd\x8b\x00\xed\xa4\x71\xa5\x58\x8d\xa2\x84\xbc\x15\xcc\x45\x23\xa1\x78\x84\x9c\x5b\x72\xee\xbb\xf8\xe4\xf8\xf8\xff\x3b\x98\x24\x21\x27\x1b\xe5\x9b\x6b\x07\xd9\x94\x50\xfa\x69\x64\xac\x1e\x51\x5d\xc1\xe1\x49\xbf\x91\x93\xe9\x24\x41\xc5\xdb\x4d\x3e\x68\x0b\x52\x18\xa4\xb2\x76\xce\x22\x32\xc3\xcb\xc1\xbb\xf3\xe1\x97\xcf\xc3\x77\x3f\x5c\x5d\x7d\xba\x6d\xa1\x06\xc8\x50\xa6\xa1\x28\x1a\xa3\x74\xd4\x6d\x24\x13\x09\x4e\xca\x8a\xff\x6e\x78\x7b\x17\x9d\x5e\x5d\xde\xdd\x5c\x9d\x9f\x0f\x6f\xe0\xf1\xb1\x99\x45\x8a\x8c\x14\x39\x77\x1d\x30\x69\x33\x75\xea\xbd\x39\x23\xdf\xb6\x0c\xe1\xbe\x9a\xc6\x70\x50\xe0\x7b\xdf\x4e\xa6\xad\x8f\xa1\x15\xea\x50\xec\x09\x2f\x50\xbe\x27\x89\x8b\x5b\x62\x5a\xf1\x90\x41\xde\xb4\x50\x1b\xb2\x42\xf3\x15\xdd\xd1\x61\x23\x5d\x81\xf2\xae\x20\x59\x42\x2e\xbe\x19\x08\x41\xda\xe2\x5b\x63\xb0\x27\x04\xfd\x66\x08\x76\x5c\x9d\xc5\x90\x22\x11\xbe\x75\x15\x80\x99\x34\x86\x37\x87\x87\x49\x2b\x45\x42\x89\xb6\x8b\x18\xfa\x47\x27\x17\xa2\x85\xca\xd2\xef\x69\x28\x91\x9e\xd0\xd3\xdf\x43\xcd\xdb\xe3\x16\x2d\x8e\x58\x6a\x85\x5f\x9c\x6a\xe5\xe9\x6b\x6b\xb4\x50\x4a\x3d\xbf\xb6\x22\x13\x92\x26\x34\x74\x0c\x25\x16\x0d\x4e\x7e\xbc\x5a\xb8\x2a\x7d\x7f\xab\x8d\xdc\x6a\xd3\xbe\x1a\x0e\xfe\xe0\xfc\xbc\x15\x22\xe4\x57\x4a\x2e\x6e\xb4\xf6\x1f\x84\x24\xb7\x70\x9e\x92\x18\xbc\x4d\xb7\x8d\xda\xc3\x57\x9b\xaa\x81\xbb\xd4\x2a\xc8\x6b\x91\x92\xcb\x61\x3a\x31\xd7\x56\x8f\x85\x6c\xd9\xff\x45\x47\x76\x93\x2a\x2f\x12\x7a\x5f\xdc\x54\x0d\x06\xbd\xa6\x70\xda\x50\x16\x7a\x3a\x95\x07\xe4\xcc\x22\xa3\xeb\x96\x5d\x6e\xbe\x55\xef\xd7\xad\x27\xc7\x9d\xc5\x26\xd3\x6a\x2c\x26\x09\x9a\x57\x56\xf9\x2d\xed\xda\x76\xf7\x05\xbb\xbb\xc4\xd6\x3e\xae\xad\x8d\x68\x68\x2b\x9f\x00\x88\x69\x6d\x79\x19\x92\x17\x94\xe7\x92\xd0\xd1\xbf\x07\xad\xe7\x6d\x27\xca\x42\xaf\xf0\x8a\xde\xaa\xd9\xfc\xd7\x1c\xc6\x75\x29\xbc\xee\x66\xd6\x6f\x31\x17\x9a\x2f\x3d\x09\x9d\x97\x09\x57\x1a\xf1\x4a\x7a\x29\xd2\xc5\xd5\x5c\x5d\x2e\xdf\x17\xf7\x20\xbf\x15\x6a\x22\x69\x07\xc7\x66\x6e\x2e\x58\x2e\x52\xe9\xc5\xb3\x38\x06\x52\xae\xe8\x03\xe8\x33\x5a\xcc\xb5\xe5\x2b\x7f\xfc\xf2\x41\x2d\x82\x4a\xad\xbc\xea\xf2\x03\x93\x14\x6a\xb6\xe2\x50\x95\xa7\xba\xab\x6a\x81\x9d\x5a\x19\xe7\xa5\x83\x8b\x0f\x0e\xea\xf0\xf7\xb8\x4e\x50\xa8\x4e\xe8\x7f\x44\xb5\x6c\x8e\x80\x12\x14\x32\x06\xa5\xa3\xd0\x4c\x2d\xbe\x5f\xc5\x6c\xf3\x29\xb8\xd4\x52\x98\xb0\x24\xcd\xe5\xf9\xfc\x6a\x88\x21\xff\x9f\x4f\x07\xc0\x58\x9d\x09\x4e\x65\xe7\x55\x30\x6c\x8b\xec\x6c\x3c\xfe\xe5\x6f\xc4\x9d\x3f\x03\x00\x00\xff\xff\xbf\xf5\xf6\x68\x57\x1a\x00\x00")

func manifestsWebhookOperatorClusterserviceversionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorClusterserviceversionYaml,
		"manifests/webhook-operator.clusterserviceversion.yaml",
	)
}

func manifestsWebhookOperatorClusterserviceversionYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorClusterserviceversionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook-operator.clusterserviceversion.yaml", size: 6743, mode: os.FileMode(420), modTime: time.Unix(1760582299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsWebhookOperatorsCoreosIo_webhooktestsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdc\xb8\xf1\x7f\xef\x4f\x31\xf0\xff\x0f\x34\x0e\x2c\xad\x9d\x2b\xd2\xcb\xbe\x09\x02\x27\x29\x8c\xde\x05\x41\xec\x4b\x8b\xba\xee\x81\x12\x47\x5a\xd6\x12\xa9\xe3\x83\xed\xbd\x34\xdf\xbd\x18\x92\x5a\x69\xb5\x92\xd7\x71\xd0\xbe\x12\x5f\x59\x7c\x98\x19\xce\xfc\xe6\x81\xe3\x65\x8d\xf8\x8c\xda\x08\x25\x97\xc0\x1a\x81\xf7\x16\x25\x7d\x99\xf4\xe6\x47\x93\x0a\xb5\xb8\x3d\x3d\xb8\x11\x92\x2f\xe1\xcc\x19\xab\xea\x4f\x68\x94\xd3\x39\xbe\xc5\x42\x48\x61\x85\x92\x07\x35\x5a\xc6\x99\x65\xcb\x03\x00\x26\xa5\xb2\x8c\xa6\x0d\x7d\x02\xe4\x4a\x5a\xad\xaa\x0a\x75\x52\xa2\x4c\x6f\x5c\x86\x99\x13\x15\x47\xed\x89\xb7\xac\x6f\x4f\xd2\xd3\x57\xe9\xc9\x01\x40\xae\xd1\x9f\xbf\x14\x35\x1a\xcb\xea\x66\x09\xd2\x55\xd5\x01\x80\x64\x35\x2e\xe1\x0e\xb3\x95\x52\x37\x16\x8d\x35\xc9\x97\x2f\x70\xf6\xe9\x6d\x72\xf1\xcb\xfb\xf7\xe7\x7f\x83\xaf\x5f\xd3\xb8\x9a\xaa\x06\x35\xb3\x4a\x9b\x34\x57\x1a\x15\xdd\xe4\xc0\x34\x98\x93\x50\xb9\x92\x2d\x5f\x2f\xa2\xb1\x9a\x59\x2c\xd7\x4b\xf8\xa0\x24\x1e\x00\x94\x5a\xb9\x66\xc3\x69\x94\x56\x90\x26\xde\x31\xe8\xe7\xaf\x61\xfb\x25\x1a\xeb\x67\x2b\x61\xec\x5f\x86\x2b\x3f\x89\xb8\xda\x54\x4e\xb3\x6a\xcf\x75\x82\x78\x42\x96\xae\x62\x7a\x6b\xef\xd8\x56\x93\xab\x06\x97\xf0\x81\x04\x6b\x58\x8e\xfc\x00\x20\x5e\xd4\x0b\x9a\x44\x0d\xde\x9e\x06\xba\xf9\x0a\x6b\x16\x6e\x00\xa0\x1a\x94\x6f\x3e\x9e\x7f\xfe\xe1\x62\x6b\x1a\x80\xa3\xc9\xb5\x68\xac\x37\x53\xef\x26\x20\x0c\xd8\x15\x42\xd8\x0f\x85\xd2\xfe\xb3\x7f\x1f\x78\xf3\xf1\x7c\x43\xa7\xd1\xa4\x47\x2b\x5a\xa5\x85\xd1\x83\x5f\x6f\x76\xc0\xf5\xdf\xc9\xd6\x1a\x10\xdd\x78\x0a\x38\xe1\x10\x83\x28\xf1\xb2\xc8\xe3\xdd\x40\x15\x60\x57\xc2\x80\xc6\x46\xa3\x41\x19\x90\x49\xd3\x4c\x82\xca\xfe\x85\xb9\x4d\x07\xa4\x2f\x50\x13\x19\x30\x2b\xe5\x2a\x1e\xb1\x62\x41\x63\xae\x4a\x29\x7e\xdf\xd0\x36\x60\x95\x67\x5a\x31\xeb\xb5\x21\x2d\x6a\xc9\x2a\xb8\x65\x95\xc3\x63\x60\x92\x0f\x28\xd7\x6c\x0d\x1a\x89\x27\x38\xd9\xa3\xe7\x0f\x98\xa1\x1c\x3f\x2b\x8d\x20\x64\xa1\x96\xb0\xb2\xb6\x31\xcb\xc5\xa2\x14\xb6\x75\xca\x5c\xd5\xb5\x93\xc2\xae\x17\xde\xbf\x44\xe6\x08\x9f\x0b\x8e\xb7\x58\x2d\x8c\x28\x13\xa6\xf3\x95\xb0\x98\x5b\xa7\x71\xc1\x1a\x91\xf8\x8b\x48\xef\x98\x69\xcd\xff\x4f\x47\x37\x36\x5b\x6c\xed\x9a\x00\x64\xac\x16\xb2\xec\x2d\x78\x7c\x7f\x83\x79\x08\xf5\x04\x0f\x16\x49\x85\x2b\x76\x56\xa0\x29\x52\xdd\xa7\x77\x17\x97\xd0\x4a\x12\x2c\x15\x8c\xd2\x6d\xdd\xd1\x4b\x6b\x1f\xd2\xa6\x90\x05\xea\x70\xae\xd0\xaa\xf6\x34\x51\xf2\x46\x09\x69\xfd\x47\x5e\x09\x94\x16\x8c\xcb\x6a\x61\x09\x06\xbf\x39\x8f\x4b\xab\x86\x64\xcf\x7c\xe0\x82\x0c\xc1\x35\x9c\x59\xe4\xc3\x0d\xe7\x12\xce\x58\x8d\xd5\x19\x33\xf8\x3f\xb6\x15\x59\xc5\x24\x64\x84\x47\x59\xab\x1f\x8e\x87\x9b\x83\x7a\x7b\x0b\x6d\x4c\x9c\x30\x2d\x2d\x6f\xb9\x18\x47\x23\x34\x39\x81\x65\x16\xc9\x91\x86\x51\xaf\x1d\xe3\xee\xee\xe5\x73\x74\x76\x38\x3b\x60\xfc\xb3\xdf\x14\x40\x54\x08\xac\x38\xd8\x15\xb3\x70\x27\xaa\x8a\x8c\x64\xd0\x7a\xff\xd3\x0e\x21\x5b\x7b\xc9\x3c\xd9\x6d\x4d\xb4\xa3\x0d\xe4\x3b\x4b\x41\x29\x99\x52\x15\x32\x39\x58\xbd\x65\x95\xe0\x7b\xa4\xfc\x4c\x7b\xa0\x76\xc6\x0e\x85\x8a\xd1\xd0\x13\x09\x41\x27\x0a\xe1\xaf\x30\x22\x63\x8c\x0c\x74\xa8\xf5\x88\x6f\x91\x97\xa0\x4d\x86\xd9\x16\x38\x09\x02\x3c\x0a\x08\x96\x59\x67\x1e\x82\x82\xdf\xb0\x05\x06\x95\x19\xf2\xc6\xef\x42\x43\xae\x24\x17\xbd\x7a\x61\x92\xff\x4e\x94\xd9\x3e\xdd\x85\x8c\xe0\xf9\x4e\x6b\xef\xfa\xad\x64\x34\xd9\xcf\x5e\xd3\x4a\x06\x78\xc7\xf2\x55\x47\x1a\x56\x8c\x50\xe8\xa4\xf8\xcd\xa1\x57\x1f\x05\x77\xd0\x58\x54\x98\xdb\xa0\x89\xa8\x1c\x4a\x2c\xde\x67\x44\x21\x72\x60\xf4\x97\x6d\x99\x77\x0c\x47\x38\x5e\x58\x26\x39\xd3\xbc\xc7\xd5\x7b\x3d\x08\x99\x57\x8e\x8f\x78\x0b\x19\xf7\xf0\xcd\x2d\x13\x15\xcb\x2a\x3c\x5c\x6e\xf1\x20\xbf\x29\x5c\x55\xad\xa1\x70\x32\x27\x72\x6c\x0c\x73\x09\x1c\x7e\xd4\xaa\xd4\x68\xa8\xc6\x18\xa1\x91\x21\x85\x6a\x5f\x91\x21\x27\x4c\xc7\xe0\x38\x4e\xeb\x2d\x96\x9a\x71\xe4\x43\x42\x05\x13\x15\x72\x72\x0d\x8d\xa4\x59\xa5\xa1\x66\x42\x5a\x26\x24\x50\x58\xde\x8a\x29\x63\xda\xb9\xdc\xd2\x30\x6e\x5b\x87\x92\x86\xf4\x26\xbe\xd4\x94\x78\xdf\xb3\xca\xe0\x31\x31\xf9\x45\xde\x48\x75\x27\x77\x2d\x2c\x2c\xd6\x23\x70\x1b\x00\xee\x6c\xc3\x82\xe2\x36\x13\x92\x24\xb5\x4c\x54\xc6\x17\x3b\xc4\x74\xdb\xc2\x11\x73\x23\x74\xa1\x8f\x43\xe1\xeb\x22\xf8\xf4\x00\x00\xa7\xdd\x25\x8c\x8a\x19\x7b\xa9\x99\x34\xa2\xad\x94\xc7\xf7\x3d\xc6\x85\xa6\x28\xb6\xf5\x1d\xad\x80\xa5\x09\x7f\xc7\x0e\x9f\x9b\xdd\xc8\x43\xfa\x25\x8d\x44\x33\x59\x05\x4c\x2a\xbb\x42\x3d\x76\xbd\x30\x2e\x49\x13\xb1\xcc\xca\x10\xee\x56\x28\x3d\x0b\x27\x39\xea\x6a\xed\x91\xd7\x99\x60\xc5\x64\x89\x3c\x05\x38\x2f\x42\x2a\x10\x06\x28\x63\x7b\x13\x1f\xd3\x41\x09\xce\xb4\x95\x85\x97\x77\x43\x91\xd4\x1d\x92\x48\x24\xe3\xf3\x4a\x9e\x63\x63\xc9\x79\xa6\x44\x2c\x94\xae\x99\x5d\x02\x41\x3e\x21\x8a\x13\xfb\x26\xf2\x70\x37\x6a\x34\x86\x95\xdf\x6d\xa3\x48\x26\x24\xc5\x95\xab\x99\x24\x87\xe2\x74\x85\x6e\x4d\x72\x91\xfb\x3c\xb8\x01\x2b\xcb\x94\x0b\x41\xb1\x33\xd9\x1e\xab\x50\x71\x95\x51\x98\x03\xac\x1b\xbb\x8e\x77\x9b\x3a\x54\xb3\xfb\x9f\x50\x96\x76\xb5\x84\x1f\x5e\xfc\xe9\xe5\x8f\x4f\x55\x53\x9b\x4e\xfe\x8c\x92\x1e\x5c\x3b\x6f\x82\x6f\xd7\xd8\x2e\xc5\x5e\x65\xe9\x55\x92\xb6\xd5\x52\x5a\x76\x7b\x3c\xbe\xb6\xd1\x7e\xc7\x8c\xcf\xef\x19\x33\xc8\xc1\x35\x0f\xa9\xf0\xbd\xd2\x20\xa4\xb1\x4c\xe6\x78\x0c\xa2\x18\x67\x22\x4c\x1b\x30\xaa\x35\x9c\xbe\x38\x86\x2c\x5a\x29\x0d\x3e\x94\x76\xb9\xed\xea\xfe\x3a\x1d\xb9\x8a\x30\xf0\xea\x78\x20\x27\x45\x43\xe7\x23\x12\xa1\x76\x52\xc4\x3b\x61\x57\x14\xa0\x7d\xf8\x8a\x0f\x99\xd1\x94\xd9\xde\x63\x9f\x8f\x08\x69\x5f\xfe\x71\x0a\x1f\x42\x8a\xda\xd5\x4b\x38\x79\x10\x19\xf4\x82\x2a\x51\x8f\xee\xd1\xc8\xcc\xf7\xc3\x21\x50\xe9\xc2\x39\xa3\x40\x5b\x6a\x56\xd7\xcc\x8a\x1c\x04\xa7\xa2\xbb\x10\xa8\xfb\x6e\x14\x52\x99\x3f\xd8\xbe\x71\x37\xea\xfe\x83\x89\xe1\xf1\x11\x8e\xf5\x51\x2b\xee\x72\x7a\xba\xa8\xa2\xab\x11\x86\xf9\x9e\x3c\x2f\x94\x58\x80\xf7\x64\x9d\xcd\x03\xd1\x17\x1d\x35\x32\x29\x64\x69\xa2\x28\x94\xe6\x29\xae\x1d\x4f\x72\xa5\x43\x77\x2b\xa4\x48\xdc\x16\xa4\x9e\x96\xf6\xb7\x30\x82\x23\x65\x5e\x06\xa5\x63\x9a\x49\x8b\xc8\x29\x5a\x3e\x14\x1e\x22\x8d\x5e\xe4\x66\xdd\xcb\x68\x4f\xa4\x88\xe1\x25\xc4\x62\xba\x6a\x7c\x73\xf9\x28\xf3\x88\xf0\x72\x7a\xf2\xe2\x01\x90\x6d\x76\x4d\x6c\x69\x98\xa5\x37\xfa\x12\xfe\x79\xf5\x26\xf9\x3b\x4b\x7e\xbf\x7e\x16\xff\x38\x49\x5e\xfd\x7a\xbc\xbc\x7e\xde\xfb\xbc\x3e\x7a\xfd\xff\x4f\x0d\x64\x63\xb5\x74\x37\xc6\xaa\xea\xb6\x82\x68\xd1\x70\x3c\x5a\xd3\x4c\x16\x34\x61\xa0\x74\xf5\x14\xd3\x04\x0e\x89\xd4\xe1\xf4\xb2\xe7\x31\xbd\x1e\x79\x3f\x55\x25\x7e\xc3\x63\x14\xe2\xeb\x6b\x55\xf4\x43\x5a\xef\xe5\x0d\x3e\xb4\x42\xa1\x54\x8a\xf7\xac\x6e\x2a\x4c\x73\x55\x2f\x26\x5f\xe6\xed\xe8\xa7\xa8\xd3\x97\x7b\xf1\xf1\xec\x2a\xa0\xe0\xfa\xd9\x55\x12\xff\x7a\xde\x4e\x1d\xbd\x7e\xf6\x8f\xf4\xc1\xf5\xa3\xe7\x8b\xa3\xd7\xcf\x7a\xd8\xba\xbe\x4a\x3a\x60\xa5\xd7\xcf\x8f\x5e\xf7\xd6\x8e\x9e\x08\xb3\xf1\x17\x5f\x18\xc9\x48\x3d\x37\xba\x2d\x96\x0d\xa3\x6b\x21\xe8\x8d\x2e\x05\xd4\x8e\x2e\x91\xd4\x23\x0b\x13\xaf\xce\xfe\x22\xd3\x9a\xad\x77\xd6\xee\x93\x1b\x97\xa1\x96\x68\xd1\x24\x95\x30\x36\xa9\x59\x93\xdc\xe0\x7a\xc4\xbf\x26\xb8\xef\x92\x08\x0c\x6b\xd6\xec\x7f\x19\xef\xaa\x39\xf1\xd1\xfb\x60\xf2\x54\xc8\xd3\x4b\xdf\x07\x88\xfd\x65\xa5\xa9\xfc\xeb\xcd\xb8\x6c\xd3\x80\x6b\x09\xc7\xa0\x01\x5f\xbe\xf6\x5b\xb5\x2f\xe6\x56\xed\xdc\xaa\x9d\x5b\xb5\xfd\x31\xb7\x6a\x47\x4d\xfb\xdf\x68\xd5\x0e\xff\x53\x36\xc9\xfc\x6c\xb3\xd1\x83\x49\x42\xcc\xce\xb1\xd4\xdb\x66\x9e\xc2\x3b\x2e\x6c\x7f\xe6\x57\xaf\xb7\xb4\x54\x63\x99\x43\x81\xc6\x5a\xdd\xe2\x22\x98\x7b\x67\xcb\xc3\xcd\x92\xa9\x6e\xf3\xce\x15\xbe\xb9\xe3\x3c\x55\x6a\xc4\x3e\xf4\x74\xd7\x19\xf6\x74\x9e\x61\xba\xfb\xbc\x23\xf5\x13\x3a\xd0\x13\x72\xfb\x8b\x3e\xaa\x0b\xbd\x5f\xfe\xe9\xda\x64\xac\x23\x0d\x0f\xd5\x07\x53\x8d\xed\x0e\x9a\x73\x77\x7b\xee\x6e\xcf\xdd\xed\x6e\xcc\xdd\xed\x47\x50\x9c\xbb\xdb\x73\x77\x7b\xee\x6e\xcf\xdd\xed\xb9\xbb\x3d\x77\xb7\xbb\x31\x77\xb7\xe7\xee\xf6\xc8\x98\xbb\xdb\x73\x77\x1b\xe6\xee\xf6\x9e\xee\x76\x41\x2e\xf6\x98\xf6\x76\x17\x40\x42\x95\x8a\xfc\xc3\xf0\xb7\xd4\x87\xc1\x55\xdb\x1f\x49\xfb\xcf\xde\x5b\xba\xfd\x45\x38\xf1\x46\xfe\xb9\xfd\x8d\x73\x98\xfe\x4f\x00\x00\x00\xff\xff\xdd\xae\x21\xce\xd2\x2e\x00\x00")

func manifestsWebhookOperatorsCoreosIo_webhooktestsYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsWebhookOperatorsCoreosIo_webhooktestsYaml,
		"manifests/webhook.operators.coreos.io_webhooktests.yaml",
	)
}

func manifestsWebhookOperatorsCoreosIo_webhooktestsYaml() (*asset, error) {
	bytes, err := manifestsWebhookOperatorsCoreosIo_webhooktestsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/webhook.operators.coreos.io_webhooktests.yaml", size: 11986, mode: os.FileMode(420), modTime: time.Unix(1760519201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataAnnotationsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x79\x0a\xc1\x8e\xa3\x2e\x81\x9e\x72\x0b\xa5\xec\x30\x36\xf6\x06\x43\xb5\x95\xd4\x4b\x6a\x05\x59\xc9\x28\xa5\xef\x3e\x96\x7f\xfb\x73\x99\x77\xb3\x6c\x7d\x3f\x3e\x4b\x1f\x86\xc0\x8a\xea\x39\xc4\x22\x03\xb8\x83\x3d\x0b\xc1\xb1\x0f\xae\x25\xf8\xf6\x68\x32\x00\xee\x48\x50\x59\xa2\x59\x4e\x95\xe0\x99\xde\x59\x1a\xe3\xd9\x4c\x22\x73\x26\xe7\x51\x2f\x1d\x99\x21\x2f\x40\xa8\xf6\x51\xe5\x72\x3f\xe4\xe9\x04\x0c\xbe\xa2\xa8\x71\x24\xac\xd5\xf6\x1f\x16\x14\x1d\x2a\x4e\xfa\xb9\x48\x97\x77\x68\x1b\xac\x27\xff\xd7\x2b\xbc\x94\xfb\xc7\xf2\xe1\xb0\x79\x2e\x9f\x0e\x70\xbb\x25\x63\xec\x09\x43\xa0\x76\xfa\x05\xb6\xdd\x09\xff\x96\x9e\x49\xc5\xdb\x68\x8e\xbd\x6f\x1d\x49\xb1\xf6\x6f\xa2\x6b\x36\x43\x6e\x76\xb9\x49\x18\xe4\x82\xf9\xb9\x8b\xf9\x36\x69\x15\x0b\xa1\x13\x7e\x23\xab\xaf\x2d\x5e\xb8\xd7\x02\x6a\x36\x4d\x7f\xa4\xd9\x9f\xf1\xbc\x1d\x76\xd9\x18\x9c\xf2\x2b\x2c\x50\xb1\x80\x52\x54\x1f\xea\x84\xe0\x7c\x76\xfe\xb2\x1a\x2d\x0b\x59\x14\x97\x64\x76\x04\x58\x0e\x95\xaf\x47\xb5\x8e\x71\x59\x19\xdb\xec\x23\x00\x00\xff\xff\x6d\xdd\xa3\xc9\xe6\x02\x00\x00")

func metadataAnnotationsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metadataAnnotationsYaml,
		"metadata/annotations.yaml",
	)
}

func metadataAnnotationsYaml() (*asset, error) {
	bytes, err := metadataAnnotationsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/annotations.yaml", size: 742, mode: os.FileMode(420), modTime: time.Unix(1760581498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsScorecardConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\x17\x50\x82\xa2\x9b\xd6\x5e\xa0\x53\x77\x46\x66\x62\xc1\xb2\xa8\x92\x54\x82\xa0\xe8\xdd\x0b\x3b\x7f\x4d\x93\xa5\x05\xea\x6c\x36\xfd\xa8\xef\x7d\x06\x84\x25\xbe\x91\x68\xe4\xec\x41\x03\x0b\x05\x94\x76\xc1\x85\x04\x8d\x65\x2d\x38\xd0\x8e\xa5\x5f\x44\x5e\x6e\x9f\x30\x95\x0e\x9f\x9b\x3e\xe6\xd6\xc3\x0b\xe7\x75\xdc\x54\x41\x8b\x9c\x9b\x81\x0c\x5b\x34\xf4\x0d\x40\xc6\x81\x3c\x84\xe9\x7b\xa3\x86\x1b\x52\xdf\x38\x28\x28\x98\x12\x25\x0f\x26\x95\x1a\x00\x23\x35\x1d\x17\x1c\x50\x36\xd9\x17\x8e\xd9\xc6\xf7\x71\x72\x2e\xe3\xc6\xd8\x71\xb8\x42\x8d\xc1\x85\x8e\x42\xef\xb4\x50\x98\xc6\x71\xc0\x0d\x79\x78\xaf\xb8\x1f\x6b\x9e\xba\xbb\x73\xf9\xe5\xf5\x59\xbe\xe6\x3e\xf3\x2e\x4f\xcb\x09\x57\x94\xf4\x00\x05\xd0\x1a\x8d\xfc\x01\x73\x1c\x4d\x1b\x37\xe0\x4b\x29\x35\x96\x91\x7f\x3a\xa1\x50\x38\x3d\x03\x0c\x5c\xb3\xbd\xa2\x75\x1e\x3e\x3e\x7f\x23\xca\x69\x70\xab\x9a\xdb\x44\x6e\x8b\x29\xb6\x87\x9f\xfc\x3f\xb6\x9c\x86\x2b\xd7\xbb\xec\x39\x84\x83\xb4\xea\x3a\xdc\x3e\xc8\xf9\x1e\x7e\x5e\x6d\x21\xe5\x2a\x81\xf4\x21\xd6\x67\xfa\x1c\xd2\xd3\x25\x6a\x49\x83\xc4\x62\x2c\x73\x1a\xff\x44\xcf\xa2\x6b\x68\x55\x1f\x25\x7c\x03\xff\x93\xf2\xb7\xe8\x25\x76\x1d\xf9\x0a\x00\x00\xff\xff\xb8\xc2\xd4\xda\x4e\x06\x00\x00")

func testsScorecardConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_testsScorecardConfigYaml,
		"tests/scorecard/config.yaml",
	)
}

func testsScorecardConfigYaml() (*asset, error) {
	bytes, err := testsScorecardConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/scorecard/config.yaml", size: 1614, mode: os.FileMode(420), modTime: time.Unix(1760519124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"manifests/webhook-operator-controller-manager-metrics-service_v1_service.yaml":                    manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYaml,
	"manifests/webhook-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml":          manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYaml,
	"manifests/webhook-operator-webhooktest-admin-role_rbac.authorization.k8s.io_v1_clusterrole.yaml":  manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
	"manifests/webhook-operator-webhooktest-editor-role_rbac.authorization.k8s.io_v1_clusterrole.yaml": manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
	"manifests/webhook-operator-webhooktest-viewer-role_rbac.authorization.k8s.io_v1_clusterrole.yaml": manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYaml,
	"manifests/webhook-operator.clusterserviceversion.yaml":                                            manifestsWebhookOperatorClusterserviceversionYaml,
	"manifests/webhook.operators.coreos.io_webhooktests.yaml":                                          manifestsWebhookOperatorsCoreosIo_webhooktestsYaml,
	"metadata/annotations.yaml":   metadataAnnotationsYaml,
	"tests/scorecard/config.yaml": testsScorecardConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"manifests": &bintree{nil, map[string]*bintree{
		"webhook-operator-controller-manager-metrics-service_v1_service.yaml":                    &bintree{manifestsWebhookOperatorControllerManagerMetricsService_v1_serviceYaml, map[string]*bintree{}},
		"webhook-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml":          &bintree{manifestsWebhookOperatorMetricsReader_rbacAuthorizationK8sIo_v1_clusterroleYaml, map[string]*bintree{}},
		"webhook-operator-webhooktest-admin-role_rbac.authorization.k8s.io_v1_clusterrole.yaml":  &bintree{manifestsWebhookOperatorWebhooktestAdminRole_rbacAuthorizationK8sIo_v1_clusterroleYaml, map[string]*bintree{}},
		"webhook-operator-webhooktest-editor-role_rbac.authorization.k8s.io_v1_clusterrole.yaml": &bintree{manifestsWebhookOperatorWebhooktestEditorRole_rbacAuthorizationK8sIo_v1_clusterroleYaml, map[string]*bintree{}},
		"webhook-operator-webhooktest-viewer-role_rbac.authorization.k8s.io_v1_clusterrole.yaml": &bintree{manifestsWebhookOperatorWebhooktestViewerRole_rbacAuthorizationK8sIo_v1_clusterroleYaml, map[string]*bintree{}},
		"webhook-operator.clusterserviceversion.yaml":                                            &bintree{manifestsWebhookOperatorClusterserviceversionYaml, map[string]*bintree{}},
		"webhook.operators.coreos.io_webhooktests.yaml":                                          &bintree{manifestsWebhookOperatorsCoreosIo_webhooktestsYaml, map[string]*bintree{}},
	}},
	"metadata": &bintree{nil, map[string]*bintree{
		"annotations.yaml": &bintree{metadataAnnotationsYaml, map[string]*bintree{}},
	}},
	"tests": &bintree{nil, map[string]*bintree{
		"scorecard": &bintree{nil, map[string]*bintree{
			"config.yaml": &bintree{testsScorecardConfigYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
